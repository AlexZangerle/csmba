import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/refs/heads/develop/src/main/resources/pkl/csm/Csml.pkl"
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/security/context.pkl" as Context
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/security/actions.pkl" as Actions
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/security/guards.pkl" as Guards

/// This module defines the central security manager for the building.
/// It monitors security events, correlates them, and orchestrates responses.
class securityManagerSM extends Csml.StateMachineDescription {
  name = "securityManager"
  localContext = Context.securityManagerContext
  states {
    smInit
    smSecure
    smElevatedRisk
    smIntrusionAlert
    smEmergencyResponseActive
  }
}

local const smInit: Csml.StateDescription = new {
  name = "init"
  initial = true
  always { new { target = smSecure.name } }
}

/// Normal, secure state. Monitors for suspicious activity.
local const smSecure: Csml.StateDescription = new {
  name = "secure"
  entry {
    new Csml.AssignActionDescription { variable { name = Vars.vFailedAttemptsCount value = "'0'" } }
    new Csml.AssignActionDescription { variable { name = Vars.vAlertDetails value = "''" } }
  }
  on {
    // --- High Severity Events ---
    new {
      event = Events.eForcedEntry
      actions {
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Forced entry detected at door ' + $doorId + ' in zone ' + $zone" }
        }
      }
      target = smIntrusionAlert.name
    }
    new {
      event = Events.eTamperDetected
      actions {
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Tamper detected on device ' + $deviceId + ' at ' + $location" }
        }
      }
      target = smIntrusionAlert.name // Treat tampering seriously
    }
    new {
      event = Events.eManualSecurityAlert
      actions {
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Manual alert triggered: ' + $reason" }
        }
      }
      target = smIntrusionAlert.name
    }

    // --- Correlation Logic for Lower Severity Events ---
    new {
      event = Events.eAccessDenied
      actions {
        // Increment counter. In real system, check timestamp delta here.
        new Csml.AssignActionDescription {
          variable { name = Vars.vFailedAttemptsCount value = "\(Vars.vFailedAttemptsCount) + 1" }
        }
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Repeated access denied at door ' + $doorId + '. User: ' + $user" }
        }
      }
      // Transition if count reaches threshold (e.g., 3)
      guards { Guards.failedAttemptSoftlimitReached }
      target = smElevatedRisk.name
    }

    // --- Safety Overrides ---
    new { event = Events.eFireAlarm target = smEmergencyResponseActive.name }
    new { event = Events.eGasLeakDetected target = smEmergencyResponseActive.name }
  }
}

/// Minor suspicious activity detected (e.g., repeated failed logins).
local const smElevatedRisk: Csml.StateDescription = new {
  name = "elevatedRisk"
  entry {
    // Notify security personnel, but don't trigger major alarms yet.
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stNotifySecurityPersonnel
      input { new { name = "message" value = Vars.vAlertDetails } }
    }
    Actions.aRaiseSecurityBreach
  }
  // Stay in this state for a while (e.g., 30 mins) then decay back to Secure if nothing else happens.
  after {
    new Csml.TimeoutActionDescription {
      name = "riskDecayTimer"
      delay = "1800000" // 30 minutes
      action = new Csml.RaiseActionDescription { event { name = "decayRisk" channel = "internal" } }
    }
  }
  on {
    new { event = "decayRisk" target = smSecure.name }

    // Further failed attempts escalate to IntrusionAlert
    new {
      event = Events.eAccessDenied
      actions {
        new Csml.AssignActionDescription { variable { name = Vars.vFailedAttemptsCount value = "\(Vars.vFailedAttemptsCount) + 1" } }
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Escalation: Further access denied at door ' + $doorId + '. User: ' + $user" }
        }
      }
      guards { Guards.failedAttemptHardlimitReached }
      target = smIntrusionAlert.name
    }

    // High severity events still trigger immediate escalation
    new { event = Events.eForcedEntry target = smIntrusionAlert.name }
    new { event = Events.eTamperDetected target = smIntrusionAlert.name }
    new { event = Events.eManualSecurityAlert target = smIntrusionAlert.name }

    // Safety Overrides
    new { event = Events.eFireAlarm target = smEmergencyResponseActive.name }
    new { event = Events.eGasLeakDetected target = smEmergencyResponseActive.name }

    // Manual Clear
    new { event = Events.eClearSecurityAlert target = smSecure.name }
  }
}

/// High-severity event detected. Trigger alarms and lockdown.
local const smIntrusionAlert: Csml.StateDescription = new {
  name = "intrusionAlert"
  entry {
    // Raise global alert for other systems
    Actions.aRaiseSecurityBreach
    // Send commands
    Actions.aRaiseFlashLights
    Actions.aRaiseBuildingAlarm
    // Potentially lock down specific zones based on $zone from triggering event
    // new Csml.RaiseActionDescription { event { name = Events.eLockdownZone channel = "global" data { new { name="zone" value="$zone"} } } }

    // Call external services
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stNotifySecurityPersonnel
      input { new { name = "message" value = "'INTRUSION ALERT: ' + \(Vars.vAlertDetails)" } }
    }
    // Optionally notify police automatically (use with caution!)
    // new Csml.InvokeActionDescription { serviceType = ServiceTypes.stNotifyPolice input { ... } }
  }
  on {
    // Safety Overrides take precedence
    new { event = Events.eFireAlarm target = smEmergencyResponseActive.name }
    new { event = Events.eGasLeakDetected target = smEmergencyResponseActive.name }

    // Wait for manual clear from authorized personnel
    new { event = Events.eClearSecurityAlert target = smSecure.name }
  }
}

/// State entered during critical safety events to ensure security doesn't impede safety.
local const smEmergencyResponseActive: Csml.StateDescription = new {
  name = "emergencyResponseActive"
  entry {
    // Command all necessary doors to unlock for evacuation/access
    Actions.aRaiseUnlockEvacuationRoutes
    // Maybe log that security protocols are temporarily suspended due to safety event
  }
  on {
    // When the safety event is cleared, return to the normal secure state.
    new { event = Events.eDisarmFireAlarm target = smSecure.name }
    // Make sure you have an 'all clear' event defined for gas
    new { event = Events.eGasPurged target = smSecure.name }
  }
}
