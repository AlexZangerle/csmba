import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/security/actions.pkl" as Actions
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/security/context.pkl" as Context
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/security/guards.pkl" as Guards
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/refs/heads/develop/src/main/resources/pkl/csm/Csml.pkl"

/// This module defines the central securityManagerSM for the building.
class securityManagerSM extends Csml.StateMachineDescription {
  name = "securityManager"
  localContext = Context.securityManagerContext
  states {
    init
    secure
    elevatedRisk
    intrusionAlert
    emergencyResponseActive
  }
}

local const init: Csml.StateDescription = new {
  name = "init"
  initial = true
  always { new { target = secure.name } }
}

/// Secure state, monitors for suspicious activity.
local const secure: Csml.StateDescription = new {
  name = "secure"
  entry {
    new Csml.AssignActionDescription { variable { name = Vars.vFailedAttemptsCount value = "'0'" } }
    new Csml.AssignActionDescription { variable { name = Vars.vAlertDetails value = "''" } }
  }
  on {
    new {
      event = Events.eForcedEntry
      actions {
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Forced entry detected at door ' + $doorId + ' in zone ' + $zone" }
        }
      }
      target = intrusionAlert.name
    }
    new {
      event = Events.eTamperDetected
      actions {
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Tamper detected on device ' + $deviceId + ' at ' + $location" }
        }
      }
      target = intrusionAlert.name
    }
    new {
      event = Events.eManualSecurityAlert
      actions {
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Manual alert triggered: ' + $reason" }
        }
      }
      target = intrusionAlert.name
    }
    new {
      event = Events.eAccessDenied
      actions {
        new Csml.AssignActionDescription {
          variable { name = Vars.vFailedAttemptsCount value = "\(Vars.vFailedAttemptsCount) + 1" }
        }
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Repeated access denied at door ' + $doorId + '. User: ' + $user" }
        }
      }
      guards { Guards.failedAttemptSoftlimitReached }
      target = elevatedRisk.name
    }
    new { event = Events.eFireAlarm target = emergencyResponseActive.name }
    new { event = Events.eGasLeakDetected target = emergencyResponseActive.name }
  }
}

/// Minor suspicious activity detected
local const elevatedRisk: Csml.StateDescription = new {
  name = "elevatedRisk"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stNotifySecurityPersonnel
      input { new { name = "message" value = Vars.vAlertDetails } }
    }
    Actions.aRaiseSecurityBreach
  }
  after {
    new Csml.TimeoutActionDescription {
      name = "riskDecayTimer"
      delay = "1800000" // 30 minutes
      action = new Csml.RaiseActionDescription { event { name = "decayRisk" channel = "internal" } }
    }
  }
  on {
    new { event = "decayRisk" target = secure.name }
    new {
      event = Events.eAccessDenied
      actions {
        new Csml.AssignActionDescription { variable { name = Vars.vFailedAttemptsCount value = "\(Vars.vFailedAttemptsCount) + 1" } }
        new Csml.AssignActionDescription {
          variable { name = Vars.vAlertDetails value = "'Escalation: Further access denied at door ' + $doorId + '. User: ' + $user" }
        }
      }
      guards { Guards.failedAttemptHardlimitReached }
      target = intrusionAlert.name
    }
    new { event = Events.eForcedEntry target = intrusionAlert.name }
    new { event = Events.eTamperDetected target = intrusionAlert.name }
    new { event = Events.eManualSecurityAlert target = intrusionAlert.name }
    new { event = Events.eFireAlarm target = emergencyResponseActive.name }
    new { event = Events.eGasLeakDetected target = emergencyResponseActive.name }
    new { event = Events.eClearSecurityAlert target = secure.name }
  }
}

/// High-severity event detected. Trigger alarms and lockdown.
local const intrusionAlert: Csml.StateDescription = new {
  name = "intrusionAlert"
  entry {
    Actions.aRaiseServereSecurityBreach
    Actions.aRaiseFlashLights
    Actions.aRaiseBuildingAlarm
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stNotifySecurityPersonnel
      input { new { name = "message" value = "'INTRUSION ALERT: ' + \(Vars.vAlertDetails)" } }
    }
  }
  on {
    new { event = Events.eFireAlarm target = emergencyResponseActive.name }
    new { event = Events.eGasLeakDetected target = emergencyResponseActive.name }
    new { event = Events.eClearSecurityAlert target = secure.name }
  }
}

/// Security heeds to safety
local const emergencyResponseActive: Csml.StateDescription = new {
  name = "emergencyResponseActive"
  entry {
    Actions.aRaiseUnlockEvacuationRoutes
  }
  on {
    new { event = Events.eDisarmFireAlarm target = secure.name }
    new { event = Events.eGasPurged target = secure.name }
  }
}
