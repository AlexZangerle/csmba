import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/refs/heads/develop/src/main/resources/pkl/csm/Csml.pkl"
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/tempSafety/guards.pkl" as Guards
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/tempSafety/context.pkl" as Context
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/tempSafety/actions.pkl" as Actions

// This module contains the definition for the fireSafety SM

//temperatureSafety is one of three SMs that act as fire prevention system
//temperatureSafety detects temperature of critical equipment in a room
//If that temperature exceeds a predefined threshold a warning is published.
class temperatureSafetySM extends Csml.StateMachineDescription {
    name = "temperatureSafety"
    localContext = Context.fireSafetyContext
    states{
        tsInit
        tsNormal
        tsHighRisk
    }
}

local const tsInit: Csml.StateDescription = new {
    name = "init"
    initial = true
    always {
        new {
            target = tsNormal.name
        }
    }
}
// Always starts in normal state
// Gets current room temperature every 30 seconds
// Checks temperature against threshold and transitions to highRisk if necessary
local const tsNormal: Csml.StateDescription = new {
    name = "normal"
    after {
        new Csml.TimeoutActionDescription {
            name = "pullRoomTemp"
            delay = "30000"
            action = Actions.aRaiseGetRoomTemp
        }
    }
    on {
        new{
            event = Events.eTempReadingComplete
            guards {
                Guards.exceedTempThreshold
            }
            target = tsHighRisk.name
        }
        new {
            event = Events.eStartTempReading
            actions {
                new Csml.InvokeActionDescription {
                serviceType = ServiceTypes.stTempSafety
                input {
                    new {
                        name = "roomId"
                        value = "roomId"
                    }
                }
                output {
                    new {
                        reference = Vars.vRoomTemp
                    }
                }
                done {
                    new {
                        name = Events.eTempReadingComplete
                        channel = "internal"
                    }
                }
            }
            }
        }
    }
}

// High risk state invokes the high risk service to publish a warning with the corresponding roomID.
local const tsHighRisk: Csml.StateDescription = new {
    name = "highRisk"
    entry {
        new Csml.InvokeActionDescription {
                serviceType = ServiceTypes.stTempHighRisk
                input {
                    new {
                        name = "roomId"
                        value = "roomId"
                    }
                }
            }    
    }
    on {
        new {
            event = Events.eTempRiskCleared
            target = tsNormal.name
        }
    }
}
