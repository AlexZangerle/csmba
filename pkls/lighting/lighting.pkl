import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/lighting/context.pkl" as Context
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/lighting/guards.pkl" as Guards
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/refs/heads/develop/src/main/resources/pkl/csm/Csml.pkl"

// This module contains the definition for the lighting SM

class lightingSM extends Csml.StateMachineDescription {
  name = "lighting"
  localContext = Context.lightingContext
  states {
    init
    off
    turnOn
    dim
    userLevel
    flashingAlarm_Off
    flashingAlarm_On
  }
}

// Initially always transitions to off
local const init: Csml.StateDescription = new {
  name = "init"
  initial = true
  always {
    new {
      target = off.name
    }
  }
}

// Lights off - default state when inactive or vacant.
local const off: Csml.StateDescription = new {
  name = "off"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stTurnOff
    }
  }
  on {
    new {
      event = Events.eOccupancyDetected
      guards { Guards.energySavingInactive }
      target = turnOn.name
    }
    new {
      event = Events.eOccupancyDetected
      guards { Guards.energySavingActive }
      target = dim.name
    }
    new {
      event = Events.eActivateLightUserLevel
      target = userLevel.name
    }
    new {
      event = Events.eZoneActive
      guards { Guards.isMyZone }
    }
    new {
      event = Events.eAccessGranted
      guards { Guards.isMyZone }
      target = turnOn.name
    }
    new {
      event = Events.eZoneWarning
      guards { Guards.isMyZone }
    }
    new {
      event = Events.eFlashAllLights
      target = flashingAlarm_Off.name
    }
    new {
      event = Events.eActivateEnergySaving
      actions { new Csml.AssignActionDescription { variable { name = Vars.vEnergySaving; value = "true" } } }
    }
    new {
      event = Events.eDeactivateEnergySaving
      actions { new Csml.AssignActionDescription { variable { name = Vars.vEnergySaving; value = "false" } } }
    }
  }
}

// Lights on - zone is active and occupied.
local const turnOn: Csml.StateDescription = new {
  name = "on"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stTurnOn
    }
  }
  on {
    new { event = Events.eOccupancyTransient; target = dim.name }
    new { event = Events.eOccupancyVacant; target = off.name }
    new { event = Events.eActivateLightUserLevel target = userLevel.name }
    new { event = Events.eZoneWarning; guards { Guards.isMyZone }; target = dim.name }
    new { event = Events.eZoneInactive; guards { Guards.isMyZone }; target = off.name }
    new { event = Events.eFlashAllLights target = flashingAlarm_Off.name }
  }
}

// Lights dim - grace period, warning, or energy saving.
local const dim: Csml.StateDescription = new {
  name = "dim"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stDim
    }
  }
  on {
    new { event = Events.eOccupancyDetected; guards { Guards.energySavingInactive }; target = turnOn.name }
    new { event = Events.eOccupancyDetected; guards { Guards.energySavingActive } }
    new { event = Events.eOccupancyVacant; target = off.name }
    new { event = Events.eActivateLightUserLevel target = userLevel.name }
    new { event = Events.eZoneActive; guards { Guards.isMyZone }; target = turnOn.name }
    new { event = Events.eZoneInactive; guards { Guards.isMyZone }; target = off.name }
    new { event = Events.eFlashAllLights target = flashingAlarm_Off.name }
    new { event = Events.eActivateEnergySaving; actions { new Csml.AssignActionDescription { variable { name = Vars.vEnergySaving; value = "true" } } } }
    new { event = Events.eDeactivateEnergySaving; actions { new Csml.AssignActionDescription { variable { name = Vars.vEnergySaving; value = "false" } } } }
  }
}

// Lights at manual level - user override.
local const userLevel: Csml.StateDescription = new {
  name = "userLevel"
  localContext = Context.lightingContext
  staticContext { variables { Vars.vUserLightLevel } }
  entry {
    new Csml.AssignActionDescription {
      variable {
        name = Vars.vUserLightLevel.name
        value = "if ($lightLevel != null && $lightLevel != -1) $lightLevel else lightLevel"
      }
    }
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stTurnUserLevel
      input { new { name = "lightLevel"; value = "lightLevel" } }
    }
  }
  on {
    new { event = Events.eDeactivateLightUserLevel target = off.name }
    new { event = Events.eZoneWarning; guards { Guards.isMyZone }; target = dim.name }
    new { event = Events.eZoneInactive; guards { Guards.isMyZone }; target = off.name }
    new { event = Events.eFlashAllLights target = flashingAlarm_Off.name }
  }
}

// Flashing lights states in case of intrusion
local const flashingAlarm_Off: Csml.StateDescription = new {
  name = "flashingAlarm_Off"
  entry {
    new Csml.InvokeActionDescription { serviceType = ServiceTypes.stTurnOff }
  }
  after {
    new Csml.TimeoutActionDescription {
      name = "flashOffPeriodTimer"
      delay = "1000"
      action = new Csml.RaiseActionDescription { event { name = "flashOn"; channel = "internal" } }
    }
  }
  on {
    new {
      event = "flashOn"
      target = flashingAlarm_On.name
    }
    new {
      event = Events.eClearSecurityAlert
      target = off.name
    }
  }
}

local const flashingAlarm_On: Csml.StateDescription = new {
  name = "flashingAlarm_On"
  entry {
    new Csml.InvokeActionDescription { serviceType = ServiceTypes.stTurnOn }
  }
  after {
    new Csml.TimeoutActionDescription {
      name = "flashOnPeriodTimer"
      delay = "500"
      action = new Csml.RaiseActionDescription { event { name = "flashOff"; channel = "internal" } }
    }
  }
  on {
    new {
      event = "flashOff"
      target = flashingAlarm_Off.name
    }
    new {
      event = Events.eClearSecurityAlert
      target = off.name
    }
  }
}

