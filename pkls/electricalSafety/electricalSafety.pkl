import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/refs/heads/develop/src/main/resources/pkl/csm/Csml.pkl"
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/electricalSafety/guards.pkl" as Guards
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/electricalSafety/context.pkl" as Context
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/electricalSafety/actions.pkl" as Actions

// This module contains the definition for the eletricalSafety SM

//eletricalSafety is the second part for the fire prevention system
//eletricalSafety detects arc faults across multiple rooms.
//If an arc fault is detected, the location of that arc fault and a warning is published
class electricalSafetySM extends Csml.StateMachineDescription {
    name = "electricalSafety"
    localContext = Context.electricalSafetyContext
    states{
        esInit
        esMonitoring
        esArcFault
        esAcknowledged
        esGas
    }
}

local const esInit: Csml.StateDescription = new {
    name = "init"
    initial = true
    always {
        new {
            target = esMonitoring.name
        }
    }
}
//Always starts in monitoring state
//Invokes service to check for arc faults every 30 seconds
local const esMonitoring: Csml.StateDescription = new {
    name = "monitoring"
    after {
        new Csml.TimeoutActionDescription {
            name = "checkArcFault"
            delay = "30000"
            action = Actions.aRaiseStartArcFaultDetection
        }
    }
    on {
        new {
            event = Events.eStartArcFaultDetection
            actions {
                new Csml.InvokeActionDescription {
                serviceType = ServiceTypes.stCheckArcFault
                output {
                    new {
                        reference = Vars.vArcFaultLocation
                    }
                }
                done {
                    new {
                        name = Events.eArcFaultDetectionComplete
                        channel = "internal"
                    }
                }
            }
            }
        }
        // If an arc fault is found, transition to corresponding state
        new {
            event = Events.eArcFaultDetectionComplete
            guards {
                Guards.foundArcFault
            }
            target = esArcFault.name
        }
    }
}

// If an arc fault is detected, invoke service to trip the corresponding circuit breaker
local const esArcFault: Csml.StateDescription = new {
    name = "arcFault"
    entry {
        new Csml.InvokeActionDescription {
            serviceType = ServiceTypes.stTripCircuitBreaker
            input {
                new{
                    name = "arcFaultLocation"
                    value = Vars.vArcFaultLocation
                }
            }
        }
        Actions.aRaiseArcFaultDetected
    }
    on {
        //Transitions to ack state if eletrical fault has been manually reset
        //Currently gas state for testing purposes until eletrical subsystem is fully operational 
        new {
            event = Events.eResetElectricalFault
            target = esAcknowledged.name
        }
        new {
            event = Events.eGasLeakDetected
            target = esGas.name
        }
    }
}

// Invokes Ack Service and transitions back to monitoring state
local const esAcknowledged: Csml.StateDescription = new {
    name = "acknowledged"
    entry {
        new Csml.InvokeActionDescription {
            serviceType = ServiceTypes.stAcknowledgedEletrical
        }
    }
    always {
        new {
            target = esMonitoring.name
        }
    }
}
//Testing purposes
local const esGas: Csml.StateDescription = new {
    name = "gas"
    terminal = true
    entry {
        new Csml.InvokeActionDescription{
            serviceType = ServiceTypes.stCutPower
            input {
                new {
                    name = "gasLeakLocation"
                    value = "$gasLeakLocation"
                }
            }
        }
    }
}
