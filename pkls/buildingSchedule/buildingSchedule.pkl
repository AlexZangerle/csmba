import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/buildingSchedule/actions.pkl" as Actions
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/buildingSchedule/context.pkl" as Context
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/buildingSchedule/guards.pkl" as Guards
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/refs/heads/develop/src/main/resources/pkl/csm/Csml.pkl"

/// This module defines the buildingScheduleSM
class buildingScheduleSM extends Csml.StateMachineDescription {
  name = "buildingSchedule"
  localContext = Context.scheduleContext
  states {
    init
    evaluating
    businessHours
    afterHours
    weekendClosed
    emergencyOverride
  }
}

local const init: Csml.StateDescription = new {
  name = "init"
  initial = true
  always {
    new {
      target = evaluating.name
    }
  }
}

/// The central state calling the time service and routing to the corresponding operational mode.
local const evaluating: Csml.StateDescription = new {
  name = "evaluating"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stGetScheduleMode
      output { new { reference = Vars.vCurrentScheduleMode } }
      done { new { name = Events.eScheduleCheckComplete channel = "internal" } }
    }
  }
  on {
    new {
      event = Events.eScheduleCheckComplete
      guards { Guards.isBusinessHours }
      target = businessHours.name
    }
    new {
      event = Events.eScheduleCheckComplete
      guards { Guards.isAfterHours }
      target = afterHours.name
    }
    new {
      event = Events.eScheduleCheckComplete
      guards { Guards.isWeekend }
      target = weekendClosed.name
    }
  }
}

/// The state signifying that the building is currently in its normal operating hours
/// Re-checks every 15 minutes
local const businessHours: Csml.StateDescription = new {
  name = "businessHours"
  entry {
    Actions.aRaiseEnterBusinessHours
  }
  after {
    new Csml.TimeoutActionDescription {
      name = "scheduleCheck"
      delay = "900000" // 15 minutes
      action = Actions.aRaiseStartScheduleCheck
    }
  }
  on {
    new { event = Events.eStartScheduleCheck target = evaluating.name }
    new { event = Events.eFireAlarm target = emergencyOverride.name }
  }
}


/// State to signify the building is currently between businessHours on a weekday
local const afterHours: Csml.StateDescription = new {
  name = "afterHours"
  entry {
    Actions.aRaiseEnterAfterHours
  }
  after {
    new Csml.TimeoutActionDescription {
      name = "scheduleCheck"
      delay = "900000"
      action = Actions.aRaiseStartScheduleCheck
    }
  }
  on {
    new { event = Events.eStartScheduleCheck target = evaluating.name }
    new { event = Events.eFireAlarm target = emergencyOverride.name }
  }
}

/// State to signify it is currently weekend
/// Less frequent schedule check
local const weekendClosed: Csml.StateDescription = new {
  name = "weekendClosed"
  entry {
    Actions.aRaiseEnterWeekend
  }
  after {
    new Csml.TimeoutActionDescription {
      name = "scheduleCheck"
      delay = "7200000" // 2 hours
      action = Actions.aRaiseStartScheduleCheck
    }
  }
  on {
    new { event = Events.eStartScheduleCheck target = evaluating.name }
    new { event = Events.eFireAlarm target = emergencyOverride.name }
  }
}

/// State signifying the building is currently in an emergency
local const emergencyOverride: Csml.StateDescription = new {
  name = "emergencyOverride"
  on {
    // When the alarm is disarmed, re-evaluate to return to the correct state.
    new { event = Events.eDisarmFireAlarm target = evaluating.name }
    new { event = Events.eGasPurged target = evaluating.name }
  }
}
