import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/hvac/actions.pkl" as Actions
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/hvac/context.pkl" as Context
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/hvac/guards.pkl" as Guards
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/refs/heads/develop/src/main/resources/pkl/csm/Csml.pkl"

// This module contains the definition for the HVAC SM

class hvacSM extends Csml.StateMachineDescription {
  name = "hvac"
  localContext = Context.hvacContext
  states {
    init
    off
    fanOnly
    heating
    cooling
    emergency
  }
}

local const init: Csml.StateDescription = new {
  name = "init"
  initial = true
  always {
    new {
      target = off.name
    }
  }
}

// Default state when zone inactive or vacant.
local const off: Csml.StateDescription = new {
  name = "off"
  entry {
    // Ensure HVAC unit is off when entering
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stSetHVAC
      input { new { name = "mode"; value = "'off'" } }
    }
  }
  on {
    new {
      event = Events.eOccupancyDetected
      target = fanOnly.name
    }
    new {
      // Zone becomes active -> transition to fanOnly to start evaluating HVAC needs
      event = Events.eZoneActive
      guards { Guards.isMyZone }
      target = fanOnly.name
    }
    new { event = Events.eFireAlarm; target = emergency.name }
    new { event = Events.eGasLeakDetected; target = emergency.name }
  }
}

// Monitoring state, only circulates air and decides whether to heat or cool.
local const fanOnly: Csml.StateDescription = new {
  name = "fanOnly"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stSetHVAC
      input { new { name = "mode"; value = "'fan'" } }
    }
    Actions.aRaiseIndoorTempCheck
  }
  after {
    new Csml.TimeoutActionDescription {
      name = "periodicTempCheck"
      delay = "300000" // Check every 5 minutes
      action = Actions.aRaiseIndoorTempCheck
    }
  }
  on {
    new {
      event = Events.eStartIndoorTempCheck
      actions {
        new Csml.InvokeActionDescription {
          serviceType = ServiceTypes.stGetIndoorTemp
          output { new { reference = Vars.vIndoorTemp } }
          done { new { name = Events.eIndoorTempCheckComplete; channel = "internal" } }
        }
      }
    }
    new {
      event = Events.eIndoorTempCheckComplete
      guards { Guards.roomToCold }
      target = heating.name
    }
    new {
      event = Events.eIndoorTempCheckComplete
      guards { Guards.roomToHot }
      target = cooling.name
    }
    new {
      event = Events.eOccupancyVacant
      target = off.name
    }
    new {
      event = Events.eZoneWarning
      guards { Guards.isMyZone }
    }
    new {
      event = Events.eZoneInactive
      guards { Guards.isMyZone }
      target = off.name
    }
    new { event = Events.eFireAlarm; target = emergency.name }
    new { event = Events.eGasLeakDetected; target = emergency.name }
  }
}

// Active heating state.
local const heating: Csml.StateDescription = new {
  name = "heating"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stSetHVAC
      input { new { name = "mode"; value = "'heat'" } }
    }
    Actions.aRaiseIndoorTempCheck
  }
  after {
    new Csml.TimeoutActionDescription {
      name = "periodicTempCheck"
      delay = "600000" // Check every 10 minutes while actively heating
      action = Actions.aRaiseIndoorTempCheck
    }
  }
  on {
    new {
      event = Events.eStartIndoorTempCheck
      actions {
        new Csml.InvokeActionDescription {
          serviceType = ServiceTypes.stGetIndoorTemp
          output { new { reference = Vars.vIndoorTemp } }
          done { new { name = Events.eIndoorTempCheckComplete; channel = "internal" } }
        }
      }
    }
    new {
      event = Events.eIndoorTempCheckComplete
      guards { Guards.roomComfortable }
      target = fanOnly.name
    }
    new {
      event = Events.eIndoorTempCheckComplete
      guards { Guards.roomToHot }
      target = cooling.name
    }
    new {
      event = Events.eOccupancyVacant
      target = off.name
    }
    new {
      event = Events.eZoneWarning
      guards { Guards.isMyZone }
      target = fanOnly.name
    }
    new {
      event = Events.eZoneInactive
      guards { Guards.isMyZone }
      target = off.name
    }
    new { event = Events.eFireAlarm; target = emergency.name }
    new { event = Events.eGasLeakDetected; target = emergency.name }
  }
}

// Active cooling state.
local const cooling: Csml.StateDescription = new {
  name = "cooling"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stSetHVAC
      input { new { name = "mode"; value = "'cool'" } }
    }
    Actions.aRaiseIndoorTempCheck
  }
  after {
    new Csml.TimeoutActionDescription {
      name = "periodicTempCheck"
      delay = "600000" // Check every 10 minutes while actively cooling
      action = Actions.aRaiseIndoorTempCheck
    }
  }
  on {
    new {
      event = Events.eStartIndoorTempCheck
      actions {
        new Csml.InvokeActionDescription {
          serviceType = ServiceTypes.stGetIndoorTemp
          output { new { reference = Vars.vIndoorTemp } }
          done { new { name = Events.eIndoorTempCheckComplete; channel = "internal" } }
        }
      }
    }
    new {
      event = Events.eIndoorTempCheckComplete
      guards { Guards.roomComfortable }
      target = fanOnly.name
    }
    new {
      event = Events.eIndoorTempCheckComplete
      guards { Guards.roomToCold }
      target = heating.name
    }
    new {
      event = Events.eOccupancyVacant
      target = off.name
    }
    new {
      event = Events.eZoneWarning
      guards { Guards.isMyZone }
      target = fanOnly.name
    }
    new {
      event = Events.eZoneInactive
      guards { Guards.isMyZone }
      target = off.name
    }
    new { event = Events.eFireAlarm; target = emergency.name }
    new { event = Events.eGasLeakDetected; target = emergency.name }
  }
}

// Emergency State
local const emergency: Csml.StateDescription = new {
  name = "emergency"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stSetHVAC
      input { new { name = "mode"; value = "'off'" } }
    }
  }
  on {
    new {
      event = Events.eDisarmFireAlarm
      target = off.name
    }
    new {
      event = Events.eGasPurged
      target = off.name
    }
  }
}
