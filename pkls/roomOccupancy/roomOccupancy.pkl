amends "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/develop/src/main/resources/pkl/CollaborativeStateMachineDescription.pkl"
import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/develop/src/main/resources/pkl/CollaborativeStateMachineDescription.pkl" as CSM
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/roomOccupancy/actions.pkl" as Actions
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/roomOccupancy/context.pkl" as Context

/// This module contains the definition for the room occupancy SM

/// The room occupancy SM contains four states: vacant, occupied transient + and initialization state
/// It also contains a nested state machine to monitor the detection process time
roomOccupancySM: CSM.StateMachineDescription = new {
    name = "roomOccupancy"
    localContext = Context.occupancyontext
    stateMachines {
        occupancyMonitor
    }
    states {
        rInit
        rVacant
        rOccupied
        rTransient        
    }
}

/// The occupancyMonitor sm monitors the room occupancy SM.
/// It starts a timer when the detection process begins.
/// Should the detection process not finish before the timer runs out, maintenance is required.
occupancyMonitor: CSM.StateMachineDescription = new {
    name = "OccupancyMonitoring"
    states {
        omInit
        omIdle
        omMonitoring
        omMaintenance
    }
}

/// Initially the SM will always transition to vacant
rInit: CSM.StateDescription = new {
    name = "init"
    initial = true
    always {
        new {
            target = rVacant.name
        }
    }
}

/// The detection process is initiated every 30 seconds
rVacant: CSM.StateDescription = new {
    name = "vacant"
    entry {
        new CSM.AssignActionDescription{
            variable {
                name = Vars.vCurrentOccupancy
                value = "'vacant'"
                }
            }
    }
    after {
        new CSM.TimeoutActionDescription {
            name = "detectOccupancy"
            delay = "30000"
            action = Actions.aRaiseStartDetectingOccupancy
        }
    }
    on {
        new {
            event = Events.eStartDetectingOccupancy
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = ServiceTypes.stDetectOccupancy
                    output {
                        new {
                            reference = Vars.vOccupancyDetected
                        }
                    }
                    done {
                        new {
                            name = Events.eDetectionComplete
                            channel = "internal"
                        }
                    }
                }
            }
        }
        /// Transition to occupied once occupancy is detected
        new {
            event = Events.eDetectionComplete
            guards {
                new CSM.GuardDescription {
                    expression = Vars.vOccupancyDetected
                }
            }
            actions {
                Actions.aRaiseOccupancyDetected
            }
            target = rOccupied.name
        }
        new {
            event = Events.eDetectionComplete
            guards {
                new CSM.GuardDescription {
                    expression = "!\(Vars.vOccupancyDetected)"
                }
            }
            actions {
                Actions.aRaiseOccupancyVacant
            }
        }
    }
}

/// The detection process is initiated every 30 seconds
rOccupied: CSM.StateDescription = new {
    name = "occupied"
    entry {
        new CSM.AssignActionDescription{
            variable {
                name = Vars.vCurrentOccupancy
                value = "'occupied'"
                }
            }
    }
    after {
        new CSM.TimeoutActionDescription {
            name = "detectOccupancy"
            delay = "30000"
            action = Actions.aRaiseStartDetectingOccupancy
        }
    }
    on {
        new {
            event = Events.eStartDetectingOccupancy
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = ServiceTypes.stDetectOccupancy
                    output {
                        new {
                            reference = Vars.vOccupancyDetected
                        }
                    }
                    done {
                        new {
                            name = Events.eDetectionComplete
                            channel = "internal"
                        }
                    }
                }
            }
        }
        new {
            event = Events.eDetectionComplete
            guards {
                new CSM.GuardDescription {
                    expression = Vars.vOccupancyDetected
                }
            }
            actions {
                Actions.aRaiseOccupancyDetected
            }
        }
        /// Transition to transient once no occupancy is detected
        /// This acts as a vacancy grace period
        new {
            event = Events.eDetectionComplete
            guards {
                new CSM.GuardDescription {
                    expression = "!\(Vars.vOccupancyDetected)"
                }
            }
            actions {
                Actions.aRaiseOccupancyTransient
            }
            target = rTransient.name
        }
        /// Energy saving prevents the lights from fully turning on (except manually)
        /// Transition to transient to dim lights
        new {
            event = Events.eActivateEnergySaving
            target = rTransient.name
            actions{
                new CSM.AssignActionDescription {
                    variable {
                        name = Vars.vEnergySaving
                        value = "true"
                    }
                }
                Actions.aRaiseOccupancyTransient
            }
        }
    }
}

/// The detection process is initiated every 30 seconds
rTransient: CSM.StateDescription = new {
    name = "transient"
    entry {
        new CSM.AssignActionDescription{
            variable {
                name = Vars.vCurrentOccupancy
                value = "'transient'"
                }
            }
    }
    after {
        new CSM.TimeoutActionDescription {
            name = "detectOccupancy"
            delay = "30000"
            action = Actions.aRaiseStartDetectingOccupancy
        }
    }
    on {
        new {
            event = Events.eStartDetectingOccupancy
            actions {
                new CSM.InvokeActionDescription {
                    serviceType = ServiceTypes.stDetectOccupancy
                    output {
                        new {
                            reference = Vars.vOccupancyDetected
                        }
                    }
                    done {
                        new {
                            name = Events.eDetectionComplete
                            channel = "internal"
                        }
                    }
                }
            }
        }
        /// During grace period - transition to vacant if no occupancy is detected again
        /// transition to occupied if occupancy is detected
        new {
            event = Events.eDetectionComplete
            guards {
                new CSM.GuardDescription {
                    expression = Vars.vOccupancyDetected
                }
            }
            actions {
                Actions.aRaiseOccupancyDetected
            }
            target = rOccupied.name
        }
        new {
            event = Events.eDetectionComplete
            guards {
                new CSM.GuardDescription {
                    expression = "!\(Vars.vOccupancyDetected)"
                }
            }
            actions {
                Actions.aRaiseOccupancyVacant
            }
            target = rVacant.name
        }
    }
}