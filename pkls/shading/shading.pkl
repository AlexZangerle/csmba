import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/refs/heads/develop/src/main/resources/pkl/csm/Csml.pkl"
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/shading/guards.pkl?v=1" as Guards
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/shading/actions.pkl" as Actions
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/shading/context.pkl" as Context

// This module contains the definition for the shading SM

// The shading SM contains six states:
// half, fullyOpen, close, userLevel, emergency + an initialization state
// The state transitions are controlled by outside temperature detection, except for userLevel, which is determined by the user
class shadingSM extends Csml.StateMachineDescription {
    name = "shading"
    localContext = Context.blindLockContext
    states {
        init
        half
        fullyOpen
        close
        userLevel
        emergency
    }
}

local const init: Csml.StateDescription = new {
    name = "init"
    initial = true
    always {
        new {
            target = half.name
        }
    }
}
// Initially the SM always transitions to half
local const half: Csml.StateDescription = new {
    name = "half"
    entry {
        new Csml.InvokeActionDescription {
            serviceType = ServiceTypes.stBlindsHalf
        }
    }
    on {
        // Depending on temperature readings transitions to fullyOpen or clsoe take place
        // Given that the blinds are not locked
        new {
            event = Events.eTempLow
            guards {
                Guards.isLockedGuard
            }
            target = fullyOpen.name
            actions{
                new Csml.AssignActionDescription {
                    variable {
                        name = Vars.vTemperature
                        value = "$temp"
                    }
                }
            }
        }
        new {
            event = Events.eTempHigh
            guards {
                Guards.isLockedGuard
            }
            target = close.name
            actions{
                new Csml.AssignActionDescription {
                    variable {
                        name = Vars.vTemperature
                        value = "$temp"
                    }
                }
            }
        }
        // Transition to userLevel when an event with a manual level is received
        new {
            event = Events.eActivateBlinduserLevel
            target = userLevel.name
        }
        new {
            event = Events.eLockBlinds
            actions {
                Actions.aBlindLock
            }
        }
        new {
            event = Events.eUnlockBlinds
            actions {
                Actions.aBlindUnlock
            }
        }
        // On Fire/Smoke events, transition to emergency state
        new {
            event = Events.eFireAlarm
            target = emergency.name
        }
        new {
            event = Events.eSmokeAlert
            target = emergency.name
        }
    }
}

// Blinds fullyOpen when temperature is low
local const fullyOpen: Csml.StateDescription = new {
    name = "fullyOpen"
    entry {
        new Csml.InvokeActionDescription {
            serviceType = ServiceTypes.stBlindsOpen
        }
    }
    on {
        // Transitions to half/close depending on temperature
        // Given blinds are not locked
        new {
            event = Events.eTempMedium
            guards {
                Guards.isLockedGuard
            }
            target = half.name
            actions{
                new Csml.AssignActionDescription {
                    variable {
                        name = Vars.vTemperature
                        value = "$temp"
                    } 
                }
            }
        }
        new {
            event = Events.eTempHigh
            guards {
                Guards.isLockedGuard
            }
            target = close.name
            actions{
                new Csml.AssignActionDescription {
                    variable {
                        name = Vars.vTemperature
                        value = "$temp"
                    }
                }
            }
        }
        new {
            event = Events.eActivateBlinduserLevel
            target = userLevel.name
        }
        new {
            event = Events.eLockBlinds
            actions {
                Actions.aBlindLock
            }
        }
        new {
            event = Events.eUnlockBlinds
            actions {
                Actions.aBlindUnlock
            }
        }
        new {
            event = Events.eFireAlarm
            target = emergency.name
        }
        new {
            event = Events.eSmokeAlert
            target = emergency.name
        }
    }
}

// Blinds close when temperature is high
local const close: Csml.StateDescription = new {
    name = "close"
    entry {
        new Csml.InvokeActionDescription {
            serviceType = ServiceTypes.stBlindsClose
        }
    }
    on {
        // Transition to half, fullyOpen depending on temperature
        // Given blinds are not locked
        new {
            event = Events.eTempMedium
            guards {
                Guards.isLockedGuard
            }
            target = half.name
            actions{
                new Csml.AssignActionDescription {
                    variable {
                        name = Vars.vTemperature
                        value = "$temp"
                    }
                }
            }
        }
        new {
            event = Events.eTempLow
            guards {
                Guards.isLockedGuard
            }
            target = fullyOpen.name
            actions{
                new Csml.AssignActionDescription {
                    variable {
                        name = Vars.vTemperature
                        value = "$temp"
                    }
                    
                }
            }
        }
        new {
            event = Events.eActivateBlinduserLevel
            target = userLevel.name
        }
        new {
            event = Events.eLockBlinds
            actions {
                Actions.aBlindLock
            }
        }
        new {
            event = Events.eUnlockBlinds
            actions {
                Actions.aBlindUnlock
            }
        }
        new {
            event = Events.eFireAlarm
            target = emergency.name
        }
        new {
            event = Events.eSmokeAlert
            target = emergency.name
        }
    }
    
}

// Blinds fullyOpen to manual user level
// Manual level can be saved between outwards transitions and eventual re-entry.
// If user level event with level -1 is received, previous manual level will be used. 
local const userLevel: Csml.StateDescription = new {
    name = "userLevel"
    staticContext {
        variables{
            Vars.vUserBlindLevel
        }
    }
    entry {
        new Csml.AssignActionDescription {
        variable {
            name = Vars.vUserBlindLevel.name
            value = "if ($blindLevel != -1) $blindLevel else blindLevel"
        }
    }
        new Csml.InvokeActionDescription {
            serviceType = ServiceTypes.stBlindsUserLevel
            input {
                new {
                    name = "blindLevel"
                    value = "blindLevel"
                }
            }
        }
    }
    on {
        // Assign temperature readings in the background, for accurate exit on deactivation of manual level
        new {
            event = Events.eTempLow
            actions{
                new Csml.AssignActionDescription{
                    variable {
                        name = Vars.vTemperature
                        value = "$temp"
                    }
                }
            }
        }
        new {
            event = Events.eTempMedium
            actions {
                new Csml.AssignActionDescription{
                    variable {
                        name = Vars.vTemperature
                        value = "$temp"
                    }
                }
            }
        }
        new {
            event = Events.eTempHigh
            actions{
                new Csml.AssignActionDescription{
                    variable {
                        name = Vars.vTemperature
                        value = "$temp"
                    }
                }
            }
        }
        new {
            event = Events.eLockBlinds
            actions {
                Actions.aBlindLock
            }
        }
        new {
            event = Events.eUnlockBlinds
            actions {
                Actions.aBlindUnlock
            }
        }
        // Once manual level is deactivated, transition to correct target depending on current temperature
        new {
            event = Events.eDeactivateBlinduserLevel
            guards {
                Guards.isColdGuard
            }
            target = fullyOpen.name
        }
        new {
            event = Events.eDeactivateBlinduserLevel
            guards {
                Guards.isMediumGuard
            }
            target = half.name
        }
        new{
            event = Events.eDeactivateBlinduserLevel
            guards {
                Guards.isHotGuard
            }
            target = close.name
        }
        new {
            event = Events.eFireAlarm
            target = emergency.name
        }
        new {
            event = Events.eSmokeAlert
            target = emergency.name
        }
    }
    
}

// Emergency state is entered once smoke or fire alarm is triggered
// Blinds completely fullyOpen until manual disarming of the alarm
local const emergency: Csml.StateDescription = new {
    name = "emergency"
    entry {
        new Csml.InvokeActionDescription {
            serviceType = ServiceTypes.stBlindsUserLevel
            input {
                new {
                    name = "blindLevel"
                    value = "100"
                }
            }
        }
    }
    on {
        new {
            event = Events.eTempLow
            guards {
                Guards.noFireAlarm
                Guards.noSmokeAlert
            }
            target = fullyOpen.name
        }
        new {
            event = Events.eTempMedium
            guards {
                Guards.noFireAlarm
                Guards.noSmokeAlert
            }
            target = half.name
        }
        new {
            event = Events.eTempHigh
            guards {
                Guards.noFireAlarm
                Guards.noSmokeAlert
            }
            target = close.name
        }
        new {
            event = Events.eActivateBlinduserLevel
            guards {
                Guards.noFireAlarm
                Guards.noSmokeAlert
            }
            target = userLevel.name
        }
    }
}
