import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/events.pkl" as Events
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/serviceTypes.pkl" as ServiceTypes
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/shading/actions.pkl" as Actions
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/shading/context.pkl" as Context
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/shading/guards.pkl" as Guards
import "https://raw.githubusercontent.com/AlexZangerle/csmba/main/pkls/variables.pkl" as Vars
import "https://raw.githubusercontent.com/CollaborativeStateMachines/Cirrina/refs/heads/develop/src/main/resources/pkl/csm/Csml.pkl"

// This module contains the definition for the shadingSM
class shadingSM extends Csml.StateMachineDescription {
  name = "shading"
  localContext = Context.blindLockContext
  states {
    init
    half
    fullyOpen
    close
    userLevel
    emergency
  }
}

local const init: Csml.StateDescription = new {
  name = "init"
  initial = true
  always {
    new {
      target = half.name
    }
  }
}

// Default active state, blinds partially closed.
local const half: Csml.StateDescription = new {
  name = "half"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stBlindsHalf
    }
  }
  on {
    new { event = Events.eTempLow; guards { Guards.isLockedGuard }; target = fullyOpen.name; actions { new Csml.AssignActionDescription { variable { name = Vars.vTemperature; value = "$temp" } } } }
    new { event = Events.eTempHigh; guards { Guards.isLockedGuard }; target = close.name; actions { new Csml.AssignActionDescription { variable { name = Vars.vTemperature; value = "$temp" } } } }
    new { event = Events.eActivateBlindsUserLevel; target = userLevel.name }
    new { event = Events.eLockBlinds; actions { Actions.aBlindLock } }
    new { event = Events.eUnlockBlinds; actions { Actions.aBlindUnlock } }
    new { event = Events.eZoneInactive; guards { Guards.isMyZone }; target = close.name }
    new { event = Events.eFireAlarm; target = emergency.name }
    new { event = Events.eSmokeAlert; target = emergency.name }
    new { event = Events.eGasLeakDetected; target = emergency.name }
    new { event = Events.eLockdownZone; guards { Guards.isMyZone }; target = close.name }
  }
}

// Blinds fully open.
local const fullyOpen: Csml.StateDescription = new {
  name = "fullyOpen"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stBlindsOpen
    }
  }
  on {
    new { event = Events.eTempMedium; guards { Guards.isLockedGuard }; target = half.name; actions { new Csml.AssignActionDescription { variable { name = Vars.vTemperature; value = "$temp" } } } }
    new { event = Events.eTempHigh; guards { Guards.isLockedGuard }; target = close.name; actions { new Csml.AssignActionDescription { variable { name = Vars.vTemperature; value = "$temp" } } } }
    new { event = Events.eActivateBlindsUserLevel; target = userLevel.name }
    new { event = Events.eLockBlinds; actions { Actions.aBlindLock } }
    new { event = Events.eUnlockBlinds; actions { Actions.aBlindUnlock } }
    new { event = Events.eZoneInactive; guards { Guards.isMyZone }; target = close.name }
    new { event = Events.eFireAlarm; target = emergency.name }
    new { event = Events.eSmokeAlert; target = emergency.name }
    new { event = Events.eGasLeakDetected; target = emergency.name }
    new { event = Events.eLockdownZone; guards { Guards.isMyZone }; target = close.name }
  }
}

// Blinds fully closed
local const close: Csml.StateDescription = new {
  name = "close"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stBlindsClose
    }
  }
  on {
    new { event = Events.eTempMedium; guards { Guards.isLockedGuard }; target = half.name; actions { new Csml.AssignActionDescription { variable { name = Vars.vTemperature; value = "$temp" } } } }
    new { event = Events.eTempLow; guards { Guards.isLockedGuard }; target = fullyOpen.name; actions { new Csml.AssignActionDescription { variable { name = Vars.vTemperature; value = "$temp" } } } }
    new { event = Events.eActivateBlindsUserLevel; target = userLevel.name }
    new { event = Events.eLockBlinds; actions { Actions.aBlindLock } }
    new { event = Events.eUnlockBlinds; actions { Actions.aBlindUnlock } }
    new {
      event = Events.eZoneActive
      guards { Guards.isMyZone }
      target = half.name
    }
    new { event = Events.eFireAlarm; target = emergency.name }
    new { event = Events.eSmokeAlert; target = emergency.name }
    new { event = Events.eGasLeakDetected; target = emergency.name }
    new {
      event = Events.eClearSecurityAlert
      guards { Guards.isMyZone }
      target = half.name
    }
  }
}

// Blinds at manual user level.
local const userLevel: Csml.StateDescription = new {
  name = "userLevel"
  localContext = Context.blindLockContext
  staticContext { variables { Vars.vUserBlindLevel } }
  entry {
    new Csml.AssignActionDescription { variable { name = Vars.vUserBlindLevel.name; value = "if ($blindLevel != -1) $blindLevel else blindLevel" } }
    new Csml.InvokeActionDescription { serviceType = ServiceTypes.stBlindsUserLevel; input { new { name = "blindLevel"; value = "blindLevel" } } }
  }
  on {
    new { event = Events.eTempLow; actions { new Csml.AssignActionDescription { variable { name = Vars.vTemperature; value = "$temp" } } } }
    new { event = Events.eTempMedium; actions { new Csml.AssignActionDescription { variable { name = Vars.vTemperature; value = "$temp" } } } }
    new { event = Events.eTempHigh; actions { new Csml.AssignActionDescription { variable { name = Vars.vTemperature; value = "$temp" } } } }
    new { event = Events.eLockBlinds; actions { Actions.aBlindLock } }
    new { event = Events.eUnlockBlinds; actions { Actions.aBlindUnlock } }
    new { event = Events.eDeactivateBlindsUserLevel; guards { Guards.isColdGuard }; target = fullyOpen.name }
    new { event = Events.eDeactivateBlindsUserLevel; guards { Guards.isMediumGuard }; target = half.name }
    new { event = Events.eDeactivateBlindsUserLevel; guards { Guards.isHotGuard }; target = close.name }
    new { event = Events.eZoneInactive; guards { Guards.isMyZone }; target = close.name }
    new { event = Events.eFireAlarm; target = emergency.name }
    new { event = Events.eSmokeAlert; target = emergency.name }
    new { event = Events.eGasLeakDetected; target = emergency.name }
    new { event = Events.eLockdownZone; guards { Guards.isMyZone }; target = close.name }
  }
}

// Emergency state: Blinds fully open for safety/access.
local const emergency: Csml.StateDescription = new {
  name = "emergency"
  entry {
    new Csml.InvokeActionDescription {
      serviceType = ServiceTypes.stBlindsUserLevel
      input { new { name = "blindLevel"; value = "'100'" } }
    }
  }
  on {
    new {
      event = Events.eDisarmFireAlarm
      target = half.name
    }
    new {
      event = Events.eGasPurged
      target = half.name
    }
  }
}
